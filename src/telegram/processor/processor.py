"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–∞–≤–∞–µ–º—ã–µ events
"""
import configparser
import time

from telebot import types  # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤

from src.logic.eng.estimation.estimation import Test_estimation
from src.telegram.processor.assess_eng_level.testing import Test


class Processor:
    # —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–ø–ª—è—Ä–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    config = configparser.ConfigParser()
    config.read("src/resourses/properties.ini")

    def __init__(self, bot):
        self.bot = bot

    # –ü–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    def say_hello(self, message, markup):
        self.bot.send_message(message.chat.id,
                              text="–ü—Ä–∏–≤–µ—Ç,{0.first_name}!\n".format(
                                  message.from_user) + self.config.get("DEFAULT", "start_message") + "ü§ì",
                              reply_markup=markup)

    # –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    def create_start_button(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton(self.config.get("BUTTON", "eng_test_text") + "üìñ")
        btn2 = types.KeyboardButton(self.config.get("BUTTON", "get_contact") + "üòéü§ò")
        btn3 = types.KeyboardButton(self.config.get("BUTTON", "get_anik") + "üòÇ")
        markup.add(btn1, btn2, btn3)
        return markup

    """
    –ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞—ë—Ç –¥–≤–∞ –∫–ª–∞—Å—Å–∞: Test –∏ Test_estimation.
    –í—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã —é–∑–µ—Ä—É
    –ê –∑–∞—Ç–µ–º –æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    –ó–∞—Ç–µ–º –∂–µ –æ–∑–≤—É—á–∏–≤–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
    """

    # todo –µ—â—ë —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î —é–∑–µ—Ä–∞, –∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω —Å—Ä–∞–∑—É –∂–µ –±—Ä–∞—Ç—å –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞ –∏ —Å–ª–∞—Ç—å –º–∞–Ω–∞–≥–µ—Ä—É
    # todo —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    # todo —á—Ç–æ–±—ã –≤ –∫–∞–∫–∏—Ö –º–µ—Å—Ç–∞—Ö –±—ã–ª–∏ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏—Å—ã–ª–∞–ª–æ—Å—å —É—á–∏—Ç–µ–ª—é
    def assess_eng_level(self, message):
        test = Test(self.bot, Processor(self.bot))
        markup = test.create_answer_button()
        test.offer_take_test(message, markup)  # –ø–∏—à–µ—Ç —é–∑–µ—Ä—É —á—Ç–æ —Ç–µ—Å—Ç –Ω–∞—á–∞–ª—Å—è
        test.start_test()  # –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç
        test.send_question(message)  # –∑–∞–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    def send_contact(self, message):
        self.bot.send_message(message.chat.id, text=self.config.get("RESPONSE", "contact_response"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–∫
    def send_anik(self, message):
        self.bot.send_message(message.chat.id,
                              text=self.config.get("RESPONSE", "anik_response"))

"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–æ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
–±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª
"""

import configparser
import threading

from src.logic.eng.estimation.preporation_befor_save_bd import Preparation_before_save_bd
from src.telegram.processor.assess_eng_level.testing import Test


class Events:
    def __init__(self, bot, processor):
        self.bot = bot
        self.processor = processor

    '''
    –ú–µ—Ç–æ–¥ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 2 –º–∏–Ω—É—Ç—ã –≤—ã–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã: 
    1) –ü—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ —Ç–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –∏–ª–∏ –∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    2) –ï—Å–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    3) –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ë–î
    4) –ü–∏—à–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–º, —á—Ç–æ —Ç–µ—Å—Ç –±—ã–ª –ø—Ä–æ–π–¥–µ–Ω
    '''

    def processing_save_user(self, message):
        test = Test(self.bot, self.processor.storage)  # —Å–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–∞
        test.assess_eng_level(message)  # –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ—Ç–æ–¥ —Å –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
        preparation_before_save_bd = Preparation_before_save_bd(test,
                                                                message)  # —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        preparation_before_save_bd.run_after_delay(125,
                                                   preparation_before_save_bd.checking_test_completion)  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω –ª–∏ —Ç–µ—Å—Ç
        preparation_before_save_bd.run_after_delay(130,
                                                   preparation_before_save_bd.result_processing_if_test_is_over)  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        preparation_before_save_bd.run_after_delay(133, preparation_before_save_bd.get_user)  # –ø–æ–ª—É—á–∞–µ—Ç —é–∑–µ—Ä–∞
        preparation_before_save_bd.run_after_delay(135,
                                                   preparation_before_save_bd.save_new_user)  # —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —é–∑–µ—Ä–∞ –≤ –±–¥
        preparation_before_save_bd.run_after_delay(137,
                                                   preparation_before_save_bd.get_all_teacher)  # –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–æ–≤
        preparation_before_save_bd.run_after_delay(140,
                                                   preparation_before_save_bd.send_message_teachers)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —é–∑–µ—Ä–æ–º

    def start_listener(self):
        config = configparser.ConfigParser()
        config.read("src/resourses/properties.ini")

        # –ö–æ–≥–¥–∞ –ø—Ä–æ—Å–∏—Ö–æ–¥–∏—Ç /start, –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç —é–∑–µ—Ä–∞
        @self.bot.message_handler(commands=["start"])
        def salutatory(message):
            markup = self.processor.create_start_button()
            self.processor.say_hello(message, markup)

        # –ú–µ—Ç–æ–¥ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        @self.bot.message_handler(
            func=lambda message: message.text == (config.get("DEFAULT", "main_menu") + "‚û°Ô∏è"))
        def take_main_menu(message):
            markup = self.processor.create_start_button()
            self.bot.send_message(message.chat.id, config.get("DEFAULT", "main_menu") + "‚û°Ô∏è", reply_markup=markup)

        # –ñ–¥—ë—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç
        @self.bot.message_handler(
            func=lambda message: message.text == (config.get("BUTTON", "get_contact") + "üòéü§ò"))
        def contact_button_listener(message):
            self.processor.send_contact(message)

        # –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤ –Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –º–µ—Ç–æ–¥(processing_save_user), –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç
        @self.bot.message_handler(
            func=lambda message: message.text == (config.get("BUTTON", "eng_test_text") + "üìñ"))
        def assess_eng_level_button_listener(message):
            thread = threading.Thread(target=self.processing_save_user(message))
            thread.start()
            thread.join(timeout=150)
            if thread.is_alive():
                thread.join()

        # –ñ–¥—ë—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∏–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –µ—Å—Ç—å
        @self.bot.message_handler(
            func=lambda message: message.text == (config.get("BUTTON", "get_anik") + "üòÇ"))
        def anik_button_listener(message):
            self.processor.send_anik(message)

        self.bot.polling()  # –ú–µ—Ç–æ–¥ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –º–µ—Ç–æ–¥—ã –≤—ã—à–µ

"""
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–æ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
–±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª
"""
import configparser

from src.telegram.processor.processor import Processor


class Events:
    def __init__(self, bot):
        self.bot = bot
        self.processor = Processor(bot)

    def start_listener(self):
        tg_bot = self.bot

        config = configparser.ConfigParser()
        config.read("src/resourses/properties.ini")

        @tg_bot.message_handler(commands=["start"])
        def salutatory(message):
            markup = self.processor.create_start_button()
            self.processor.say_hello(message, markup)

        @tg_bot.message_handler(
            func=lambda message: message.text == (config.get("DEFAULT", "main_menu") + "‚û°Ô∏è"))
        def take_main_menu(message):
            markup = self.processor.create_start_button()
            self.bot.send_message(message.chat.id, config.get("DEFAULT", "main_menu") + "‚û°Ô∏è", reply_markup=markup)

        @tg_bot.message_handler(
            func=lambda message: message.text == (config.get("BUTTON", "get_contact") + "üòéü§ò"))
        def contact_button_listener(message):
            self.processor.send_contact(message)

        @tg_bot.message_handler(
            func=lambda message: message.text == (config.get("BUTTON", "eng_test_text") + "üìñ"))
        def assess_eng_level_button_listener(message):
            self.processor.assess_eng_level(message)

        @tg_bot.message_handler(
            func=lambda message: message.text == (config.get("BUTTON", "get_anik") + "üòÇ"))
        def anik_button_listener(message):
            self.processor.send_anik(message)

        tg_bot.polling()
